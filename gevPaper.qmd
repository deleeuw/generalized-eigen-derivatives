---
title: Differentiating Generalized Eigenvalues/Vectors and Singular Values/Vectors 
author: 
    - name: Jan de Leeuw
      orcid: 0000-0003-1420-1797
      email: jan@deleeuwpdx.net
      affiliation: 
        - name: University of California Los Angeles
          city: Los Angeles
          state: CA
          url: www.ucla.edu
      license: "CC0"
date: last-modified
date-format: long
bibliography: [mypubs.bib, total.bib]
number-sections: true
pdf-engine: lualatex
keep-tex: true
format:
   pdf:
    fontsize: 12pt
    include-in-header: 
     - preamble.tex
    keep-tex: true
    link-citations: true
    documentclass: scrartcl
    number-sections: true
   html:
    fontsize: 12pt
    include-in-header: 
     - preamble.css
    keep-md: true
    number-sections: true
toc: true
toc-depth: 3
editor: source
papersize: letter
graphics: true
link-citations: true
mainfont: Times New Roman
abstract: We give formulae for first and second derivatives of generalized eigenvalues/eigenvectors of symmetric matrices and generalized singular values/singular vectors of rectangular matrices when the matrices are linear or nonlinear functions of a vector of parameters. In addition, implementations in R (@r_core_team_25) are provided. Formulae are checked against Jacobians and Hessians computed by numerical differentiation. Some applications to multivariate data analysis are discussed.\sectionbreak
---

```{r loadpackages, echo = FALSE}
suppressPackageStartupMessages(library(knitr, quietly = TRUE))
suppressPackageStartupMessages(library(tinytex, quietly = TRUE))
suppressPackageStartupMessages(library(numDeriv, quietly = TRUE))
```

```{r code, echo = FALSE}
matrixPrint <- function(x,
                    digits = 6,
                    width = 8,
                    format = "f",
                    flag = "+") {
  print(noquote(formatC(
    x,
    digits = digits,
    width = width,
    format = format,
    flag = flag
  )))
}
```

**Note:** This is a working manuscript which will be expanded/updated frequently. All suggestions for improvement are welcome. All Rmd, tex, html, pdf, R, and C files are in the public domain. Attribution will be appreciated, but is not required. The files can be found at <https://github.com/deleeuw/generalized-eigen-derivatives>.

\sectionbreak

# Introduction

The generalized eigenvalue (GEV) problem for a pair $(A,B)$ of square symmetric matrices of order $n$ is to find a matrix $X$ of eigenvectors and a diagonal matrix $\Lambda$ of eigenvalues such that 
\begin{subequations}
\begin{align}
AX&=BX\Lambda,\label{eq-gevdef1}\\
X'BX&=I\label{eq-gevdef2}.
\end{align} 
\end{subequations} 
We assume that $B$ is positive definite and that the eigenvalues are in decreasing\footnote{By "decreasing" we mean $\lambda_1\geq\lambda_2\geq\cdots\geq\lambda_n$.} order along the diagonal.

A generalized singular value (GSV) problem is defined by a triple of matrices $(F,G,H)$. Here $F$ is $n\times m$, with $n\geq m$, $G$ is $n\times n$, and $H$ is $m\times m$. In GSV we solve the system 
\begin{subequations}
\begin{align}
FY&=GX\Lambda,\label{eq-gsvdef1}\\
F'X&=HY\Lambda,\label{eq-gsvdef2}\\
X'GX&=I,\label{eq-gsvdef3}\\
Y'HY&=I,\label{eq-gsvdef4}
\end{align}
\end{subequations}
for the unknowns $X, Y,$ and $\Lambda$. The columns of $X$ are the left singular vectors, the columns of $Y$ the right singular vectors. Both $G$ and $H$ are assumed to be positive definite. The singular values in $\Lambda$ are non-negative, and in decreasing order along the diagonal.

The equations \eqref{eq-gevdef1} and \eqref{eq-gevdef2} implicitly define $(X(),\Lambda())$ as a function of $(A,B)$. In the same way \eqref{eq-gsvdef1} to \eqref{eq-gsvdef4} implicitly define $(X(),Y(),\Lambda())$ as a function of $(F,G,H)$. It turns out that under suitable assumptions on the matrix arguments these implicit functions are actually differentiable, and this makes it interesting to compute their derivatives.

There is a humongous and scattered literature on formulae for and computations of derivatives of eigenvalues and eigenvectors in linear algebra, numerical mathematics, engineering, multivariate statistics, and even in physics. Reviewing and collecting all relevant literature is an impossible task. We only give the basic mathematical references, which provide the foundations upon which our results will be built (@kato_84, @baumgartel_85).

GEV and GSV are at the basis of almost all of the computations in multivariate statistics. In multinormal small sample theory the derivatives are needed for the Jacobians in change-of-variable calculations to find the distribution of many statistics. The applications we have in mind, however, are in large-sample statistics, where the derivatives are needed in Delta Method computations of standard errors and confidence intervals.

Again, the Delta Method literature is huge and diverse. Special cases have been around before there was a statistics discipline, ever since the beginning of error analysis in geodesy, physics, and astronomy (@gorroochurn_20). For the types of applications we have in mind all the relevant Delta Method details are given in @mann_wald_43 and @hsu_49.

We have written code in R (@r_core_team_25) to implement our final formulae for the first and second derivatives. Code is available at <https://github.com/deleeuw/generalized-eigen-derivatives>. In addition we have also
written R code, available in the same repository, to numerically verify the final formulae. This
uses the functions jacobian() and hessian() from the excellent R package numDeriv (@gilbert_varadhan_19).
Of course numerical verification, especially in the nonlinear case, is limited to a small number
of examples, but if we get the same results as from our formulae we do gain some confidence.

I should perhaps also mention a previous version of this paper (@deleeuw_R_07c), which has some errors and is not as complete as the current version.

\sectionbreak

# Basic Results

Suppose $A()$ and $B()$ are differentiable symmetric matrix valued functions of order $n$ on an open subset $\Theta$ of $\mathbb{R}^p$, and suppose at $\theta\in\Theta$ the matrix $B(\theta)$ is positive definite and the generalized eigenvalues of $(A(\theta),B(\theta))$ are all different. Then the ordered eigenvalues $\Lambda()$ and the eigenvectors $X()$ are differentiable functions of the parameters in a neighborhood of $\theta$. We use subscripts $i,j,k,l=1,\cdots, n$ for the elements of $A,B,\Lambda,$ and $X$, and $s,t=1,\cdots,p$ for the parameters in $\theta$. The partial derivative of a function $A()$ on 
$\Theta$ with respect to $\theta_s$, evaluated at $\theta$, is $\mathcal{D}_sA(\theta)$. In
order not to clutter our formulae the place where the derivative is evaluated is usually not
explicitly specified. Note also that it is sometimes necessary to use parentheses to distinguish $(\mathcal{D}_s)Ax$ from $\mathcal{D}_s(Ax)$.

## First Partials

Differentiate \eqref{eq-gevdef1} with respect to $\theta_s$. Then 
\begin{equation}
(\mathcal{D}_sA)X+A(\mathcal{D}_sX)=BX(\mathcal{D}_s\Lambda)+
B(\mathcal{D}_sX)\Lambda+(\mathcal{D}_sB)X\Lambda.\label{eq-firstder}
\end{equation} 
Premultiplying \eqref{eq-firstder} by $X'$ and rearranging gives 
\begin{equation}
\mathcal{D}_s\Lambda=\{X'(\mathcal{D}_sA)X-X'(\mathcal{D}_sB)X\Lambda\}+\{\Lambda X'B(\mathcal{D}_sX)-X'B(\mathcal{D}_sX)\Lambda\}.\label{eq-labfull}
\end{equation} 
The matrix $\Lambda X'B(\mathcal{D}_sX)-X'B(\mathcal{D}_sX)\Lambda$ is anti-symmetric and consequently has a zero diagonal. Taking the diagonal\footnote{The diagonal $\text{diag}(X)$ of a square matrix $X$ is a diagonal matrix with the same diagonal as $X$.} on both sides of \eqref{eq-labfull} gives 
\begin{equation}
\mathcal{D}_s\Lambda=\text{diag}\{X'(\mathcal{D}_sA)X-X'(\mathcal{D}_sB)X\Lambda\},\label{eq-labsol}
\end{equation} 
or, for a single eigenvalue $\lambda_i$ with correspondiung eigenvector $x_i$, 
\begin{equation}
\mathcal{D}_s\lambda_i=x_i'(\mathcal{D}_sA-\lambda_i\mathcal{D}_sB)x_i.\label{eq-singval}
\end{equation}

Taking the off-diagonal\footnote{The off-diagonal $\text{off}(X)$ of a square matrix $X$ is $X$ with its diagonal replaced by zeroes.} on both sides of \eqref{eq-labfull} gives 
\begin{equation}
\text{off}\{\Lambda X'B(\mathcal{D}_sX)-X'B(\mathcal{D}_sX)\Lambda\}=-\text{off}\{X'(\mathcal{D}_sA)X-X'(\mathcal{D}_sB)X\Lambda\}.\label{eq-offd}
\end{equation} 
$X$ is non-singular, and thus there is a unique square $H_s$ such that $\mathcal{D}_sX=XH_s$. Using this substitution \eqref{eq-offd} becomes 
\begin{equation}
\text{off}\{\Lambda H_s-H_s\Lambda\}=-\text{off}\{X'(\mathcal{D}_sA)X-X'(\mathcal{D}_sB)X\Lambda\}.
\end{equation} 
Switch to subscript notation and solve for $H_s$. For $s\neq t$ 
\begin{equation}
\{H_s\}_{ij}=-\frac{x_i'\{\mathcal{D}_sA-\lambda_s\mathcal{D}_sB\}x_j}{\lambda_i-\lambda_j}.\label{eq-offh}
\end{equation} 
This does not give a value for the diagonal of $H$. Differentiating \eqref{eq-gevdef2} gives 
\begin{equation}
X'B(\mathcal{D}_sX)+(\mathcal{D}_sX)'BX+X'\mathcal{D}_sBX=0.\label{eq-fromtwo}
\end{equation} 
Using $\mathcal{D}_sX=XH_s$ and taking the diagonal of \eqref{eq-fromtwo} gives 
\begin{equation}
h_{ii}=-\tfrac12 x_i'(\mathcal{D}_sB)x_i. \label{eq-diagh}
\end{equation} 
Combining \eqref{eq-offh} and \eqref{eq-diagh} shows that for the eigenvector corresponding with $\lambda_s$ we have\footnote{Symbol $\cdot$ is used for multiplication with a scalar if using it makes a formula more clear, similar to parentheses.} then 
\begin{equation}
\mathcal{D}_sx_i=-\sum_{j\neq i}\frac{x_j'\{\mathcal{D}_sA-\lambda_i\mathcal{D}_sB\}x_i}{\lambda_j-\lambda_i}x_j-\tfrac12 x_i'(\mathcal{D}_sB)x_i\cdot x_i.
\end{equation}
which can also be written as
\begin{equation}
\mathcal{D}_sx_i=-\sum_{j\neq i}\left\{\frac{x_jx_j'}{\lambda_j-\lambda_i}\right\}(\mathcal{D}_sA-\lambda_i\mathcal{D}_sB)x_i-\tfrac12 x_i'(\mathcal{D}_sB)x_i)\cdot x_i
\end{equation}
It is convenient to have a matrix expression for this derivative. Define, following @deleeuw_R_07c, the matrices
\begin{equation}
(A-\lambda_i B)^-:=
\sum_{j\neq i}\left\{\frac{x_jx_j'}{\lambda_j-\lambda_i}\right\}=
X(\Lambda-\lambda_iI)^+X',\label{eq-geninv}
\end{equation} 
where $(\Lambda-\lambda_iI)^+$ is the Moore-Penrose inverse of $\Lambda-\lambda_iI$. Matrix \eqref{eq-geninv}
is a weak inverse of $A-\lambda_i B$, in the sense that
\begin{equation}
(A-\lambda_i B)^-(A-\lambda_i B)(A-\lambda_i B)^-=(A-\lambda_i B)^-.\label{eq-2inverse}
\end{equation}
It is a Moore-Penrose inverse if and only if $B$ is identically equal to one (and thus $X'X=XX'=I$).

Using \eqref{eq-geninv} gives
\begin{equation}
\mathcal{D}_sx_i=-(A-\lambda_i B)^-(\mathcal{D}_sA-\lambda_i\mathcal{D}_sB)x_i-\tfrac12 x_i'(\mathcal{D}_sB)x_i\cdot x_i.\label{eq-singvec}
\end{equation}
Equations \eqref{eq-singval} and \eqref{eq-singvec} will be used frequently in this paper.

## Second Partials

To find second partial derivatives we start simple with the eigenvalues. Differentiate \eqref{eq-singval} with respect to $\theta_t$. This gives 
\begin{equation}
\mathcal{D}_{st}\lambda_i=2x_i'(\mathcal{D}_sA-\lambda_i\mathcal{D}_sB)\mathcal{D}_tx_i+
x_i'(D_{st}A-\lambda_s\mathcal{D}_{st}B)x_i-x_i'(\mathcal{D}_sB)x_i\cdot\mathcal{D}_t\lambda_i.\label{eq-seclbd}
\end{equation} 
Substituting from \eqref{eq-singval} and \eqref{eq-singvec} gives
\begin{multline}
\mathcal{D}_{st}\lambda_i=-2x_i'(\mathcal{D}_sA-\lambda_i\mathcal{D}_sB)W_i (\mathcal{D}_tA-\lambda_i\mathcal{D}_tB)x_i+
x_i'(D_{st}A-\lambda_i\mathcal{D}_{st}B)x_i\\-x_i'(\mathcal{D}_tB)x_i\cdot x_i'(\mathcal{D}_sA-\lambda_i\mathcal{D}_sB)x_i-x_i'(\mathcal{D_s}B)x_i\cdot x_i'(\mathcal{D}_tA-\lambda_i\mathcal{D}_tB)x_i.\label{eq-seclbdmat}
\end{multline} 
Formula \eqref{eq-seclbdmat} shows that $\mathcal{D}_{st}\lambda_i=\mathcal{D}_{ts}\lambda_i$, just as it should be.

The second partials of the generalized eigenvalues are, not surprisingly, more complicated. 
We start with 
\begin{equation}
\mathcal{D}_t(A-\lambda_i B)^-=\sum_{j\neq i}\frac{(\lambda_j-\lambda_i)\{(\mathcal{D}_tx_j)x_j'+x_j(\mathcal{D}_tx_j)'\}-x_jx_j'(\mathcal{D}_t\lambda_j-\mathcal{D}_t\lambda_i)}{(\lambda_j-\lambda_i)^2},\label{eq-dtwi}
\end{equation}
It follows from \eqref{eq-singvec} that
\begin{align}
\mathcal{D}_{st}x_i=&-\mathcal{D}_t(A-\lambda_i B)^-(\mathcal{D}_sA-\lambda_i\mathcal{D}_sB)x_i\notag\\
&-(A-\lambda_i B)^-(\mathcal{D}_{st}A-\lambda_i\mathcal{D}_{st}B)x_i\notag\\
&+\mathcal{D}_t\lambda_i\cdot (A-\lambda_i B)^-(\mathcal{D}_sB)x_i\notag\\
&-(A-\lambda_i B)^-(\mathcal{D}_{s}A-\lambda_i\mathcal{D}_{s}B)\mathcal{D}_tx_i\notag\\
&-(\mathcal{D}_tx_i)'(\mathcal{D}_sB)x_i\cdot x_i\notag\\
&-\tfrac12 x_i'(\mathcal{D}_sB)x_i\cdot\mathcal{D}_tx_i\notag\\
&-\tfrac12 x_i'(\mathcal{D}_{st}B)x_i\cdot x_i.\label{eq-hessgen}
\end{align}

We could, of course, again substitute the expressions for $\mathcal{D}_t\lambda_i$ and $\mathcal{D}_tx_i$ from \eqref{eq-singval} and \eqref{eq-singvec}, as well as $\mathcal{D}_t(A-\lambda_i B)^-$ from \eqref{eq-dtwi}, into \eqref{eq-hessgen}. This would produce a longer and more complicated formula. Computationally it makes more sense to first compute the various first derivatives and then use them to evaluate the complete expression
\eqref{eq-hessgen}.

\sectionbreak

# Software

In the [github repository](https://www.github.com/deleeuw/generalized-eigen-derivatives) there are R programs
evaluating $A, B, \mathcal{D}\Lambda, \mathcal{D}X, \mathcal{D}^2\Lambda,$ and $\mathcal{D}^2X$
at a given $\theta$. The function gevNonlinear() can be used for any non-linear model. Its only argument
is the vector $\theta$. In order to attain the necessary level of generality they need to be run from or after a template which defines global variables. Specifically the template defines the R functions theA(), theB(), dA(), dB(), ddA(), and ddB(), together with the parameters and additional values that these auxiliary functions need. 

The result is a list with

* $A(\theta)$, an $n\times n$ matrix,
* $B(\theta)$, an $n\times n$ matrix,
* $\lambda(\theta)$, an $n$-element vector,
* $X(\theta)$, an $n\times n$ matrix,
* $\mathcal{D}\Lambda(\theta)$, an $n\times p$ matrix,
* $\mathcal{D}X(\theta)$, an $n\times p\times n$ array,
* $\mathcal{D}^2\Lambda(\theta)$, a $p\times p\times n$ array,
* $\mathcal{D}^2X(\theta)$, a $p\times p\times n\times n$ array.

There is a corresponding numDeriv check function gevNonlinearNum(), which has the same argument $\theta$
and gives the same output as gevNonlinear().


\sectionbreak

# Examples

This section gives two examples of templates that use random data. We do not give the results of the various
derivative calculations, which for these examples are just a large amount of meaningless numbers. The software
in the repository, together with the templates, can be used to calculate Jacobians and Hessians for various
values of the parameter vector. I should perhaps mention that in both examples the results for the derivatives based on the formulas are the same as the results based on numerical differentiation.

## Single Parameter

In our first example we define
\begin{align}
A(\theta)&=A_0+\theta A_1+\frac12\theta^2A_2+...+\frac{1}{p}\theta^pA_p\\
B(\theta)&=B_0+\theta B_1+\frac12\theta^2B_2+...+\frac{1}{p}\theta^pB_p
\end{align}
The template for a special case with $n=4$ and $p=3$ is gevExampleOne.R in 
the [github repository](https://www.github.com/deleeuw/generalized-eigen-derivatives).

## Linear Combinations

Suppose $A()$ is linear combinations of $p$ known symmetric matrices $A_s$ and $B()$ is a linear combination of
$p$ known symmetric matrices $B_s$. There may also be "intercepts" $A_0$ and $B_0$. Thus
\begin{subequations}
\begin{align}
A(\theta)&=A_0+\sum_{s=1}^p\theta_sA_s,\\
B(\theta)&=B_0+\sum_{s=1}^p\theta_sB_s.
\end{align}
\end{subequations}
It may seem somewhat limiting that the same parameter vector $\theta$ is used for both $A()$ and $B()$. But
we can decide to make the last $q$ matrices $A_s$ and the first $p-q$ matrices $B_s$ equal to zero. This means, in effect, that $A()$ and $B()$ depend on different parameter vectors.

The template for a special case with $n=4$ and $p=6$ is gevExampleTwo.R in 
the [github repository](https://www.github.com/deleeuw/generalized-eigen-derivatives).
In this example the last three $A_s$ and the first three $B_s$ are indeed zero.


\sectionbreak

# Special Results

Our formulas and software can handle any parametric model, as long as the appropriate template
is provided with routines for $A, B, \mathcal{D}A, \mathcal{D}B, \mathcal{D}^2A,$ and $\mathcal{D}^2B$.
Nevertheless in special cases more compact and elegant formulae and more efficient computations
may exist. The question then becomes if it is worthwhile to retype the formulae and to 
reprogram the R routines for these special cases.


## Linear Combinations

The example in which $A()$ and $B()$ are linear combiunations of known matrices is important enough
for its own batch of formulae for the derivatives. The basic simplication is of course that $\mathcal{D}_sA=A_s$
and $\mathcal{D}_sB=B_s$, and that consequently the second partials $\mathcal{D}_{st}A$ and
$\mathcal{D}_{st}B$ are all zero.

For the first derivatives we find
\begin{align}
\mathcal{D}_s\lambda_i&=x_i'(A_s-\lambda_iB_s)x_i,\label{eq-singvalcon}\\
\mathcal{D}_sx_i&=-(A-\lambda_i B)^-(A_s-\lambda_iB_s)x_i-\tfrac12 x_iB_sx_i\cdot x_i.\label{eq-singveccon}
\end{align}
The second partials are
\begin{multline}
\mathcal{D}_{st}\lambda_i=-2x_i'(A_s-\lambda_iB_s)(A-\lambda_i B)^-(A_t-\lambda_iB_t)x_i\\-x_i'B_tx_i\cdot x_i'(A_s-\lambda_iB_s)x_i-x_i'B_sx_i\cdot x_s'(A_t-\lambda_iB_t)x_s,\label{eq-seclbdmatcon}
\end{multline} 
and
\begin{align}
\mathcal{D}_{st}x_i=&-\mathcal{D}_t(A-\lambda_i B)^-(A_s-\lambda_iB_s)x_i\notag\\
&+\mathcal{D}_t\lambda_i\cdot (A-\lambda_i B)^-B_sx_i\notag\\
&-(A-\lambda_i B)^-(A_s-\lambda_iB_s)\mathcal{D}_tx_i\notag\\
&-(\mathcal{D}_tx_i)'B_sx_i\cdot x_i\notag\\
&-\tfrac12 x_i'B_sx_i\cdot\mathcal{D}_tx_i.\label{eq-hessgen}
\end{align}

## Elementwise Partial Derivatives

As a special

\begin{subequations}
\begin{align}
A&=\mathop{\sum\sum}_{1\leq i\leq j}a_{ij}E_{ij},\\
B&=\mathop{\sum\sum}_{1\leq i\leq j}b_{ij}E_{ij}.
\end{align}
\end{subequations} 
Here $E_{ij}:=(e_ie_j'+e_je_i')$ for $i\neq j$ and $E_{ii}=e_ie_i'$ with $e_i$ and $e_j$ unit vectors\footnote{A unit vector $e_i$ has zeroes everywhere, except for element $i$, which is one.}. Thus \begin{equation}
\mathcal{D}_{(i,j)}A=\mathcal{D}_{(i,j)}B=E_{ij}.
\end{equation} 
and, with some improvised but obvious notation, 
\begin{subequations}
\begin{align}
\mathcal{D}_{ij}^A\lambda_s&=
\begin{cases}
2x_{is}x_{js}&\text{ if }i\neq j,\\
x_{is}^2&\text{ if }i = j.
\end{cases}\\
\mathcal{D}_{ij}^B\lambda_s&=
\begin{cases}
-2\lambda_sx_{is}x_{js}&\text{ if }i\neq j\\,
-\lambda_sx_{is}^2&\text{ if }i = j.
\end{cases}
\end{align}
\end{subequations}

## Simple Eigenvalue Decomposition

A simple eigenvalue (SEV) problem is of the form 
\begin{subequations}
\begin{align}
AX&=X\Lambda,\\
X'X&=I.
\end{align} 
\end{subequations}
Thus both $B=I$ and $\mathcal{D}B=0$. In SEV the matrix $W_i$ from \eqref{geninv} is actually the
Moore-Penrose inverse of $A-\lambda_iI$.

From \eqref{eq-singval} 
\begin{equation}
\mathcal{D}_s\lambda_i=x_i'(\mathcal{D}_sA)x_i.\label{eq-sevalsim}
\end{equation} 
and from 
\eqref{eq-singvec} 
\begin{equation}
\mathcal{D}_sx_i=-(A-\lambda_iI)^+(\mathcal{D}_sA)x_i.\label{eq-vecpersimmp}
\end{equation}

$$
\mathcal{D}_{st}\lambda_i=-2x_i'(\mathcal{D}_sA)(A-\lambda_iI)^+(\mathcal{D}_tA)x_i+
x_i'(D_{st}A)x_i.
$$

\begin{align}
\mathcal{D}_{st}x_i=&-\mathcal{D}_t(A-\lambda_i I)^+(\mathcal{D}_sA)x_i\notag\\
&-(A-\lambda_i I)^+(\mathcal{D}_{st}A)x_i\notag\\
&-(A-\lambda_i I)^+(\mathcal{D}_{s}A)\mathcal{D}_tx_i.\label{eq-hessgensimple}
\end{align}

## Generalized Singular Value Decomposition

For ease of reference we repeat the equations defining the GSD.
\begin{subequations}
\begin{align}
FY&=GX\Lambda,\label{eq-gsvdef1a}\\
F'X&=HY\Lambda,\label{eq-gsvdef2a}\\
X'GX&=I,\label{eq-gsvdef3a}\\
Y'HY&=I,\label{eq-gsvdef4a}
\end{align}
\end{subequations}

All three matrices $F$, $G$, and $H$
are assumed to be functions of the parameters $\theta$. Instead of tackling the GSV problem directly, we
reduce it to an equivalent GEV problem.

From \eqref{eq-gsvdef1a} $X=G^{-1}FY\Lambda^{-1}$ and consequently $Y$ and $\Lambda$ 
solve the GEV problem.
\begin{equation}
F'G^{-1}FY=HY\Lambda^2.
\end{equation}
Now if $A=F'G^{-1}F$ and $B=H$ we have 
$$
\mathcal{D}_sA=\mathcal{D}_s(F'G^{-1}F)=(\mathcal{D}_sF)'G^{-1}F+F'G^{-1}(\mathcal{D}_sF)-F'G^{-1}(\mathcal{D}_sG)G^{-1}F
$$ 
and $\mathcal{D}_sB=\mathcal{D}_sH$. Consequently from \eqref{eq-singval}
$$
\mathcal{D}_s\lambda_i^2=y_i'\{(\mathcal{D}_sF)'G^{-1}F+F'G^{-1}(\mathcal{D}_sF)-F'G^{-1}(\mathcal{D}_sG)G^{-1}F-\lambda_i^2\mathcal{D}_sH\}y_i
$$
This can be simplified by using $G^{-1}Fy_i=\lambda_ix_i$ and $\mathcal{D}_s\lambda_i^2=2\lambda_i\mathcal{D}_s\lambda_i$, so that
$$
\mathcal{D}_s\lambda_i=x_i'(\mathcal{D}_sF)y_i-\frac12\lambda_i\{x_i'(\mathcal{D}_sG)x_i+y_i'(\mathcal{D}_sH)y_i\}
$$

$$
\mathcal{D}_sy_i=-\sum_{j\neq i}\frac{\lambda_i^{\ } x_i'(\mathcal{D}_sF)y_j+\lambda_j^{\ }x_j'(\mathcal{D}_sF)y_i-\lambda_i\lambda_jx_i'(\mathcal{D}_sG)x_j-\lambda_i^2y_i'(\mathcal{D}_sH)y_j}{\lambda_j^2-\lambda_i^2}y_j-\tfrac12 y_i'(\mathcal{D}_sH)y_i\cdot y_i.
$$ 

In the same way from \eqref{eq-gsvdef2a} $Y=H^{-1}F'X\Lambda^{-1}$, and thus
\begin{equation}
FH^{-1}F'X=GX\Lambda^2.
\end{equation}
For this GEV 
$$
\mathcal{D}_sA=\mathcal{D}_s(FH^{-1}F')=(\mathcal{D}_sF)H^{-1}F'+FH^{-1}(\mathcal{D}_sF)'-FH^{-1}(\mathcal{D}_sH)H^{-1}F'
$$
which implies
$$
\mathcal{D}_sx_i=-\sum_{j\neq i}\frac{\lambda_ix_j'(\mathcal{D}_sF)y_i+\lambda_jx_i'(\mathcal{D}_sF)y_j-\lambda_i\lambda_jy_i'(\mathcal{D}_sH)y_j-\lambda_i^2x_i'(\mathcal{D}_sG)x_j}{\lambda_j-\lambda_i}x_j-\tfrac12 x_i'(\mathcal{D}_sG)x_i\cdot x_i
$$
$$

\sectionbreak

# Applications

## Multiple Correspondence Analysis


(also known as levels). We code our observations using indicators

In Muitple Correspondence Analysis (MCA) the data are profile frequencies.

the Burt matrix $A$ is of the form
$$
A(\theta)=\sum_{s=1}^p \theta_s g_s g_s'
$$
while $B$ is
$$
B(\theta)=m\sum_{s=1}^p \theta_s\ \text{diag}(g_s g_s').
$$

## Covariances and Correlations

## Matrix Decomposition Factor Analysis

\sectionbreak

# References
